
auto_gardening.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000011da  0000126e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080017c  0080017c  000012ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027b0  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001105  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001396  00000000  00000000  00004e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  00006210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082b  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002090  00000000  00000000  00007123  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000091b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ed       	ldi	r30, 0xDA	; 218
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 37       	cpi	r26, 0x7C	; 124
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e7       	ldi	r26, 0x7C	; 124
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 38       	cpi	r26, 0x82	; 130
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 48 02 	call	0x490	; 0x490 <main>
      9e:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_adc>:
 void init_adc(void)
 {
	// ADMUX
	/**/

	ADMUX |= (1 << REFS0);
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24

	//ADCSRA
	/**/
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	87 60       	ori	r24, 0x07	; 7
      b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
      ba:	80 81       	ld	r24, Z
      bc:	80 68       	ori	r24, 0x80	; 128
      be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
      c0:	80 81       	ld	r24, Z
      c2:	80 64       	ori	r24, 0x40	; 64
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <read_adc>:
 }

 uint16_t read_adc(uint8_t channel)
 {
	ADMUX &= 0xF0;
      c8:	ec e7       	ldi	r30, 0x7C	; 124
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	90 83       	st	Z, r25
	ADMUX |= channel;
      d2:	90 81       	ld	r25, Z
      d4:	89 2b       	or	r24, r25
      d6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);			// Starts a new conversion
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
									// wait until the conversion is done
	while(ADCSRA & (1 << ADSC));	// ADSC:0 - complete, 1: in progress 
      e2:	80 81       	ld	r24, Z
      e4:	86 fd       	sbrc	r24, 6
      e6:	fd cf       	rjmp	.-6      	; 0xe2 <read_adc+0x1a>

	return ADCW;					// Return the ADC value of the chosen channel
      e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      f0:	08 95       	ret

000000f2 <init_bh1750>:
#include "bh1750.h"
#include "twowire.h"

void init_bh1750(void)
{
	start_wait_twowire(BH1750_ADDR | TWI_SLA_W);
      f2:	86 e4       	ldi	r24, 0x46	; 70
      f4:	0e 94 06 06 	call	0xc0c	; 0xc0c <start_wait_twowire>
	write_twowire(BH1750_H_RES_MODE);
      f8:	80 e1       	ldi	r24, 0x10	; 16
      fa:	0e 94 35 06 	call	0xc6a	; 0xc6a <write_twowire>
	stop_twowire();
      fe:	0e 94 2c 06 	call	0xc58	; 0xc58 <stop_twowire>
     102:	08 95       	ret

00000104 <read_bh1750_data>:
}

void read_bh1750_data(uint16_t* lux)
{
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	8c 01       	movw	r16, r24
	uint16_t data = 0;

	start_wait_twowire(BH1750_ADDR | TWI_SLA_R);
     10e:	87 e4       	ldi	r24, 0x47	; 71
     110:	0e 94 06 06 	call	0xc0c	; 0xc0c <start_wait_twowire>
	data = read_ack_twowire();
     114:	0e 94 47 06 	call	0xc8e	; 0xc8e <read_ack_twowire>
     118:	c8 2f       	mov	r28, r24
     11a:	d0 e0       	ldi	r29, 0x00	; 0
	data <<= 8;
     11c:	dc 2f       	mov	r29, r28
     11e:	cc 27       	eor	r28, r28
	data |= read_nack_twowire();
     120:	0e 94 52 06 	call	0xca4	; 0xca4 <read_nack_twowire>
     124:	c8 2b       	or	r28, r24
	stop_twowire();
     126:	0e 94 2c 06 	call	0xc58	; 0xc58 <stop_twowire>

	*lux = (uint16_t)((double)data/1.2);
     12a:	be 01       	movw	r22, r28
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 95 07 	call	0xf2a	; 0xf2a <__floatunsisf>
     134:	2a e9       	ldi	r18, 0x9A	; 154
     136:	39 e9       	ldi	r19, 0x99	; 153
     138:	49 e9       	ldi	r20, 0x99	; 153
     13a:	5f e3       	ldi	r21, 0x3F	; 63
     13c:	0e 94 ed 06 	call	0xdda	; 0xdda <__divsf3>
     140:	0e 94 66 07 	call	0xecc	; 0xecc <__fixunssfsi>
     144:	f8 01       	movw	r30, r16
     146:	71 83       	std	Z+1, r23	; 0x01
     148:	60 83       	st	Z, r22
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	08 95       	ret

00000154 <calc_temp_sign>:
}

float calc_humi_level(uint16_t raw_humi_data)
{
	return (((float)(1023 - (raw_humi_data)) * HUM_PERCENT_MAX) / 1023 );
}
     154:	9c 01       	movw	r18, r24
     156:	22 27       	eor	r18, r18
     158:	38 7f       	andi	r19, 0xF8	; 248
     15a:	21 15       	cp	r18, r1
     15c:	88 ef       	ldi	r24, 0xF8	; 248
     15e:	38 07       	cpc	r19, r24
     160:	39 f0       	breq	.+14     	; 0x170 <calc_temp_sign+0x1c>
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	23 2b       	or	r18, r19
     166:	09 f4       	brne	.+2      	; 0x16a <calc_temp_sign+0x16>
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	89 2f       	mov	r24, r25
     16c:	81 95       	neg	r24
     16e:	08 95       	ret
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	08 95       	ret

00000174 <calc_temp_value>:
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec 01       	movw	r28, r24
     17e:	8b 01       	movw	r16, r22
     180:	0e 94 aa 00 	call	0x154	; 0x154 <calc_temp_sign>
     184:	f8 01       	movw	r30, r16
     186:	80 83       	st	Z, r24
     188:	81 11       	cpse	r24, r1
     18a:	20 c0       	rjmp	.+64     	; 0x1cc <calc_temp_value+0x58>
     18c:	be 01       	movw	r22, r28
     18e:	66 0f       	add	r22, r22
     190:	77 1f       	adc	r23, r23
     192:	62 95       	swap	r22
     194:	72 95       	swap	r23
     196:	70 7f       	andi	r23, 0xF0	; 240
     198:	76 27       	eor	r23, r22
     19a:	60 7f       	andi	r22, 0xF0	; 240
     19c:	76 27       	eor	r23, r22
     19e:	75 95       	asr	r23
     1a0:	67 95       	ror	r22
     1a2:	75 95       	asr	r23
     1a4:	67 95       	ror	r22
     1a6:	75 95       	asr	r23
     1a8:	67 95       	ror	r22
     1aa:	75 95       	asr	r23
     1ac:	67 95       	ror	r22
     1ae:	75 95       	asr	r23
     1b0:	67 95       	ror	r22
     1b2:	07 2e       	mov	r0, r23
     1b4:	00 0c       	add	r0, r0
     1b6:	88 0b       	sbc	r24, r24
     1b8:	99 0b       	sbc	r25, r25
     1ba:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e8       	ldi	r20, 0x80	; 128
     1c4:	5d e3       	ldi	r21, 0x3D	; 61
     1c6:	0e 94 23 08 	call	0x1046	; 0x1046 <__mulsf3>
     1ca:	29 c0       	rjmp	.+82     	; 0x21e <calc_temp_value+0xaa>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	19 f5       	brne	.+70     	; 0x216 <calc_temp_value+0xa2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	6c 1b       	sub	r22, r28
     1d6:	7d 0b       	sbc	r23, r29
     1d8:	66 0f       	add	r22, r22
     1da:	77 1f       	adc	r23, r23
     1dc:	62 95       	swap	r22
     1de:	72 95       	swap	r23
     1e0:	70 7f       	andi	r23, 0xF0	; 240
     1e2:	76 27       	eor	r23, r22
     1e4:	60 7f       	andi	r22, 0xF0	; 240
     1e6:	76 27       	eor	r23, r22
     1e8:	75 95       	asr	r23
     1ea:	67 95       	ror	r22
     1ec:	75 95       	asr	r23
     1ee:	67 95       	ror	r22
     1f0:	75 95       	asr	r23
     1f2:	67 95       	ror	r22
     1f4:	75 95       	asr	r23
     1f6:	67 95       	ror	r22
     1f8:	75 95       	asr	r23
     1fa:	67 95       	ror	r22
     1fc:	07 2e       	mov	r0, r23
     1fe:	00 0c       	add	r0, r0
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5d e3       	ldi	r21, 0x3D	; 61
     210:	0e 94 23 08 	call	0x1046	; 0x1046 <__mulsf3>
     214:	04 c0       	rjmp	.+8      	; 0x21e <calc_temp_value+0xaa>
     216:	66 ef       	ldi	r22, 0xF6	; 246
     218:	7f e3       	ldi	r23, 0x3F	; 63
     21a:	8c e1       	ldi	r24, 0x1C	; 28
     21c:	96 e4       	ldi	r25, 0x46	; 70
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	08 95       	ret

00000228 <calc_raw_data>:

void calc_raw_data(int16_t raw_temp_data, int8_t* sign, float* temperature, uint16_t raw_humi_data, float* humidity)
{
     228:	ef 92       	push	r14
     22a:	ff 92       	push	r15
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	7a 01       	movw	r14, r20
     236:	e9 01       	movw	r28, r18
	*temperature = calc_temp_value(raw_temp_data, sign);
     238:	0e 94 ba 00 	call	0x174	; 0x174 <calc_temp_value>
     23c:	f7 01       	movw	r30, r14
     23e:	60 83       	st	Z, r22
     240:	71 83       	std	Z+1, r23	; 0x01
     242:	82 83       	std	Z+2, r24	; 0x02
     244:	93 83       	std	Z+3, r25	; 0x03
	*humidity = calc_humi_level(raw_humi_data);
     246:	6f ef       	ldi	r22, 0xFF	; 255
     248:	73 e0       	ldi	r23, 0x03	; 3
     24a:	6c 1b       	sub	r22, r28
     24c:	7d 0b       	sbc	r23, r29
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 95 07 	call	0xf2a	; 0xf2a <__floatunsisf>
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	48 ec       	ldi	r20, 0xC8	; 200
     25c:	52 e4       	ldi	r21, 0x42	; 66
     25e:	0e 94 23 08 	call	0x1046	; 0x1046 <__mulsf3>
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 ec       	ldi	r19, 0xC0	; 192
     266:	4f e7       	ldi	r20, 0x7F	; 127
     268:	54 e4       	ldi	r21, 0x44	; 68
     26a:	0e 94 ed 06 	call	0xdda	; 0xdda <__divsf3>
     26e:	f8 01       	movw	r30, r16
     270:	60 83       	st	Z, r22
     272:	71 83       	std	Z+1, r23	; 0x01
     274:	82 83       	std	Z+2, r24	; 0x02
     276:	93 83       	std	Z+3, r25	; 0x03
}
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <match_ds18b20>:

	return DS18B20_ERROR_OK;
}

void match_ds18b20(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t* rom)
{
     286:	7f 92       	push	r7
     288:	8f 92       	push	r8
     28a:	9f 92       	push	r9
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	7c 01       	movw	r14, r24
     2a2:	6b 01       	movw	r12, r22
     2a4:	5a 01       	movw	r10, r20
     2a6:	72 2e       	mov	r7, r18
     2a8:	48 01       	movw	r8, r16
	uint8_t i = 0;

	if(rom == NULL)
     2aa:	01 2b       	or	r16, r17
     2ac:	21 f4       	brne	.+8      	; 0x2b6 <match_ds18b20+0x30>
	{
		// Skip ROM
		write_onewire(port, direction, port_in, mask, DS18B20_COMMAND_SKIP_ROM);
     2ae:	0c ec       	ldi	r16, 0xCC	; 204
     2b0:	0e 94 35 03 	call	0x66a	; 0x66a <write_onewire>
     2b4:	12 c0       	rjmp	.+36     	; 0x2da <match_ds18b20+0x54>
	}
	else
	{
		// Match ROM
		write_onewire(port, direction, port_in, mask, DS18B20_COMMAND_MATCH_ROM);
     2b6:	05 e5       	ldi	r16, 0x55	; 85
     2b8:	0e 94 35 03 	call	0x66a	; 0x66a <write_onewire>
     2bc:	e4 01       	movw	r28, r8
     2be:	21 96       	adiw	r28, 0x01	; 1
     2c0:	88 e0       	ldi	r24, 0x08	; 8
     2c2:	88 0e       	add	r8, r24
     2c4:	91 1c       	adc	r9, r1
		for(i = 1; i < 8; i++)
		{
			write_onewire(port, direction, port_in, mask, rom[i]);
     2c6:	09 91       	ld	r16, Y+
     2c8:	27 2d       	mov	r18, r7
     2ca:	a5 01       	movw	r20, r10
     2cc:	b6 01       	movw	r22, r12
     2ce:	c7 01       	movw	r24, r14
     2d0:	0e 94 35 03 	call	0x66a	; 0x66a <write_onewire>
	}
	else
	{
		// Match ROM
		write_onewire(port, direction, port_in, mask, DS18B20_COMMAND_MATCH_ROM);
		for(i = 1; i < 8; i++)
     2d4:	c8 15       	cp	r28, r8
     2d6:	d9 05       	cpc	r29, r9
     2d8:	b1 f7       	brne	.-20     	; 0x2c6 <match_ds18b20+0x40>
		{
			write_onewire(port, direction, port_in, mask, rom[i]);
		}
	}
}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	bf 90       	pop	r11
     2ec:	af 90       	pop	r10
     2ee:	9f 90       	pop	r9
     2f0:	8f 90       	pop	r8
     2f2:	7f 90       	pop	r7
     2f4:	08 95       	ret

000002f6 <read_ds18b20_scratchpad>:
#include "usart.h"
#include <stdlib.h>
#include <stdio.h>

uint8_t read_ds18b20_scratchpad(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t* rom, uint8_t* sp)
{
     2f6:	7f 92       	push	r7
     2f8:	8f 92       	push	r8
     2fa:	9f 92       	push	r9
     2fc:	af 92       	push	r10
     2fe:	bf 92       	push	r11
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	6c 01       	movw	r12, r24
     312:	5b 01       	movw	r10, r22
     314:	4a 01       	movw	r8, r20
     316:	72 2e       	mov	r7, r18
	uint8_t i = 0;

	// comm check
	if(init_onewire(port, direction, port_in, mask) == ONEWIRE_COMM_ERR)
     318:	0e 94 d5 02 	call	0x5aa	; 0x5aa <init_onewire>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	79 f1       	breq	.+94     	; 0x37e <read_ds18b20_scratchpad+0x88>
	{
		return DS18B20_ERROR_COMM;
	}

	// match rom
	match_ds18b20(port, direction, port_in, mask, rom);
     320:	27 2d       	mov	r18, r7
     322:	a4 01       	movw	r20, r8
     324:	b5 01       	movw	r22, r10
     326:	c6 01       	movw	r24, r12
     328:	0e 94 43 01 	call	0x286	; 0x286 <match_ds18b20>

	// read scratch pad
	write_onewire(port, direction, port_in, mask, DS18B20_COMMAND_READ_SP);
     32c:	0e eb       	ldi	r16, 0xBE	; 190
     32e:	27 2d       	mov	r18, r7
     330:	a4 01       	movw	r20, r8
     332:	b5 01       	movw	r22, r10
     334:	c6 01       	movw	r24, r12
     336:	0e 94 35 03 	call	0x66a	; 0x66a <write_onewire>
     33a:	e7 01       	movw	r28, r14
     33c:	87 01       	movw	r16, r14
     33e:	07 5f       	subi	r16, 0xF7	; 247
     340:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i = 0; i < 9; i++)
	{
		sp[i] = read_onewire(port, direction, port_in, mask);
     342:	27 2d       	mov	r18, r7
     344:	a4 01       	movw	r20, r8
     346:	b5 01       	movw	r22, r10
     348:	c6 01       	movw	r24, r12
     34a:	0e 94 8a 03 	call	0x714	; 0x714 <read_onewire>
     34e:	89 93       	st	Y+, r24
	// match rom
	match_ds18b20(port, direction, port_in, mask, rom);

	// read scratch pad
	write_onewire(port, direction, port_in, mask, DS18B20_COMMAND_READ_SP);
	for(i = 0; i < 9; i++)
     350:	c0 17       	cp	r28, r16
     352:	d1 07       	cpc	r29, r17
     354:	b1 f7       	brne	.-20     	; 0x342 <read_ds18b20_scratchpad+0x4c>
	{
		sp[i] = read_onewire(port, direction, port_in, mask);
	}

	// check pull up
	if((sp[0] | sp[1] | sp[2] | sp[3] | sp[4] | sp[5] | sp[6] | sp[7]) == 0)
     356:	f7 01       	movw	r30, r14
     358:	90 81       	ld	r25, Z
     35a:	81 81       	ldd	r24, Z+1	; 0x01
     35c:	89 2b       	or	r24, r25
     35e:	92 81       	ldd	r25, Z+2	; 0x02
     360:	89 2b       	or	r24, r25
     362:	93 81       	ldd	r25, Z+3	; 0x03
     364:	89 2b       	or	r24, r25
     366:	94 81       	ldd	r25, Z+4	; 0x04
     368:	89 2b       	or	r24, r25
     36a:	95 81       	ldd	r25, Z+5	; 0x05
     36c:	89 2b       	or	r24, r25
     36e:	96 81       	ldd	r25, Z+6	; 0x06
     370:	89 2b       	or	r24, r25
     372:	97 81       	ldd	r25, Z+7	; 0x07
     374:	89 2b       	or	r24, r25
     376:	11 f0       	breq	.+4      	; 0x37c <read_ds18b20_scratchpad+0x86>
	{
		return DS18B20_ERROR_PULL;
	}

	return DS18B20_ERROR_OK;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	01 c0       	rjmp	.+2      	; 0x37e <read_ds18b20_scratchpad+0x88>
	}

	// check pull up
	if((sp[0] | sp[1] | sp[2] | sp[3] | sp[4] | sp[5] | sp[6] | sp[7]) == 0)
	{
		return DS18B20_ERROR_PULL;
     37c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return DS18B20_ERROR_OK;
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	cf 90       	pop	r12
     38e:	bf 90       	pop	r11
     390:	af 90       	pop	r10
     392:	9f 90       	pop	r9
     394:	8f 90       	pop	r8
     396:	7f 90       	pop	r7
     398:	08 95       	ret

0000039a <read_ds18b20>:

uint8_t read_ds18b20(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t* rom, int16_t* temperature)
{
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	29 97       	sbiw	r28, 0x09	; 9
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	67 01       	movw	r12, r14
	uint8_t sp[9];
	uint8_t err_code = 0;

	err_code = read_ds18b20_scratchpad(port, direction, port_in, mask, rom, sp);
     3bc:	fe 01       	movw	r30, r28
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	7f 01       	movw	r14, r30
     3c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ds18b20_scratchpad>
     3c6:	18 2f       	mov	r17, r24

	if(err_code != DS18B20_ERROR_OK)
     3c8:	88 23       	and	r24, r24
     3ca:	49 f0       	breq	.+18     	; 0x3de <read_ds18b20+0x44>
	{
		put_string_usart("ds18b20 error\n");
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		*temperature = 0;
     3d4:	f6 01       	movw	r30, r12
     3d6:	11 82       	std	Z+1, r1	; 0x01
     3d8:	10 82       	st	Z, r1
		return err_code;
     3da:	81 2f       	mov	r24, r17
     3dc:	0b c0       	rjmp	.+22     	; 0x3f4 <read_ds18b20+0x5a>
	}

	*temperature = (int16_t)(sp[1] << 8) + sp[0];
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	98 2f       	mov	r25, r24
     3e4:	88 27       	eor	r24, r24
     3e6:	29 81       	ldd	r18, Y+1	; 0x01
     3e8:	82 0f       	add	r24, r18
     3ea:	91 1d       	adc	r25, r1
     3ec:	f6 01       	movw	r30, r12
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	80 83       	st	Z, r24
	// lsb = sp[0], msb = sp[1]

	return DS18B20_ERROR_OK;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
}
     3f4:	29 96       	adiw	r28, 0x09	; 9
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <convert_ds18b20>:
		}
	}
}

uint8_t convert_ds18b20(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t* rom)
{
     412:	bf 92       	push	r11
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	7b 01       	movw	r14, r22
     428:	6a 01       	movw	r12, r20
     42a:	b2 2e       	mov	r11, r18
	// comm check
	if(init_onewire(port, direction, port_in, mask) == ONEWIRE_COMM_ERR)
     42c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <init_onewire>
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	71 f0       	breq	.+28     	; 0x450 <convert_ds18b20+0x3e>
	{
		return DS18B20_ERROR_COMM;
	}
	// rom match
	match_ds18b20(port, direction, port_in, mask, rom);
     434:	2b 2d       	mov	r18, r11
     436:	a6 01       	movw	r20, r12
     438:	b7 01       	movw	r22, r14
     43a:	ce 01       	movw	r24, r28
     43c:	0e 94 43 01 	call	0x286	; 0x286 <match_ds18b20>

	// convert temperature
	write_onewire(port, direction, port_in, mask, DS18B20_COMMAND_CONVERT);
     440:	04 e4       	ldi	r16, 0x44	; 68
     442:	2b 2d       	mov	r18, r11
     444:	a6 01       	movw	r20, r12
     446:	b7 01       	movw	r22, r14
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 35 03 	call	0x66a	; 0x66a <write_onewire>

	return DS18B20_ERROR_OK;	
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	bf 90       	pop	r11
     462:	08 95       	ret

00000464 <init_port>:
void init_port()
{
	//DDRB |= (1 << PORTB0);
	
	/* PORTB1 - Temperature DQ pin 1-wire - in & out */
	DDRB &= ~(1 << PORTB1);
     464:	21 98       	cbi	0x04, 1	; 4

	/* PORTB3 - Fan output */
	DDRB |= (1 << PORTB3);
     466:	23 9a       	sbi	0x04, 3	; 4

	/* PORTB4 - Valve output */
	DDRB |= (1 << PORTB4);
     468:	24 9a       	sbi	0x04, 4	; 4

	/* PORTB5 - LED output */
	DDRB |= (1 << PORTB5);
     46a:	25 9a       	sbi	0x04, 5	; 4
     46c:	08 95       	ret

0000046e <initialization>:
}

void initialization(void)
{
	init_port();
     46e:	0e 94 32 02 	call	0x464	; 0x464 <init_port>
	init_timer1();
     472:	0e 94 62 04 	call	0x8c4	; 0x8c4 <init_timer1>
	init_twowire();
     476:	0e 94 00 06 	call	0xc00	; 0xc00 <init_twowire>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47a:	85 e3       	ldi	r24, 0x35	; 53
     47c:	8a 95       	dec	r24
     47e:	f1 f7       	brne	.-4      	; 0x47c <initialization+0xe>
     480:	00 00       	nop
	_delay_us(10);
	init_usart();
     482:	0e 94 5d 06 	call	0xcba	; 0xcba <init_usart>
	init_adc();
     486:	0e 94 53 00 	call	0xa6	; 0xa6 <init_adc>
	init_bh1750();
     48a:	0e 94 79 00 	call	0xf2	; 0xf2 <init_bh1750>
     48e:	08 95       	ret

00000490 <main>:
}

int main(void)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	a9 97       	sbiw	r28, 0x29	; 41
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
	int8_t temp_sign = 0;
     4a4:	19 82       	std	Y+1, r1	; 0x01
	int16_t raw_temp_data = 0;
     4a6:	1b 82       	std	Y+3, r1	; 0x03
     4a8:	1a 82       	std	Y+2, r1	; 0x02
	float temperature = 0;
     4aa:	1c 82       	std	Y+4, r1	; 0x04
     4ac:	1d 82       	std	Y+5, r1	; 0x05
     4ae:	1e 82       	std	Y+6, r1	; 0x06
     4b0:	1f 82       	std	Y+7, r1	; 0x07

	uint16_t raw_humi_data = 0;
     4b2:	19 86       	std	Y+9, r1	; 0x09
     4b4:	18 86       	std	Y+8, r1	; 0x08
	float humidity = 0;
     4b6:	1a 86       	std	Y+10, r1	; 0x0a
     4b8:	1b 86       	std	Y+11, r1	; 0x0b
     4ba:	1c 86       	std	Y+12, r1	; 0x0c
     4bc:	1d 86       	std	Y+13, r1	; 0x0d

	uint16_t illumination = 0;
     4be:	1f 86       	std	Y+15, r1	; 0x0f
     4c0:	1e 86       	std	Y+14, r1	; 0x0e

	char humidity_str[7] = {0};	
     4c2:	87 e0       	ldi	r24, 0x07	; 7
     4c4:	fe 01       	movw	r30, r28
     4c6:	70 96       	adiw	r30, 0x10	; 16
     4c8:	df 01       	movw	r26, r30
     4ca:	28 2f       	mov	r18, r24
     4cc:	1d 92       	st	X+, r1
     4ce:	2a 95       	dec	r18
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <main+0x3c>
	char temperature_str[12] = {0};
     4d2:	37 96       	adiw	r30, 0x07	; 7
     4d4:	9c e0       	ldi	r25, 0x0C	; 12
     4d6:	df 01       	movw	r26, r30
     4d8:	1d 92       	st	X+, r1
     4da:	9a 95       	dec	r25
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <main+0x48>
	char illumination_str[7] = {0};
     4de:	3c 96       	adiw	r30, 0x0c	; 12
     4e0:	df 01       	movw	r26, r30
     4e2:	1d 92       	st	X+, r1
     4e4:	8a 95       	dec	r24
     4e6:	e9 f7       	brne	.-6      	; 0x4e2 <main+0x52>

	initialization();
     4e8:	0e 94 37 02 	call	0x46e	; 0x46e <initialization>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ec:	bf ef       	ldi	r27, 0xFF	; 255
     4ee:	23 ed       	ldi	r18, 0xD3	; 211
     4f0:	80 e3       	ldi	r24, 0x30	; 48
     4f2:	b1 50       	subi	r27, 0x01	; 1
     4f4:	20 40       	sbci	r18, 0x00	; 0
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <main+0x62>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <main+0x6c>
     4fc:	00 00       	nop
	_delay_ms(1000);

	put_string_usart("\n\ninitialization completed\n\n");
     4fe:	8f e0       	ldi	r24, 0x0F	; 15
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>

    /* Replace with your application code */
    while (1) 
    {
		read_sensors(&raw_temp_data, &raw_humi_data, &illumination);
     506:	ae 01       	movw	r20, r28
     508:	42 5f       	subi	r20, 0xF2	; 242
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
     50c:	be 01       	movw	r22, r28
     50e:	68 5f       	subi	r22, 0xF8	; 248
     510:	7f 4f       	sbci	r23, 0xFF	; 255
     512:	ce 01       	movw	r24, r28
     514:	02 96       	adiw	r24, 0x02	; 2
     516:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <read_sensors>
		calc_raw_data(raw_temp_data, &temp_sign, &temperature, raw_humi_data, &humidity);
     51a:	28 85       	ldd	r18, Y+8	; 0x08
     51c:	39 85       	ldd	r19, Y+9	; 0x09
     51e:	8e 01       	movw	r16, r28
     520:	06 5f       	subi	r16, 0xF6	; 246
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	ae 01       	movw	r20, r28
     526:	4c 5f       	subi	r20, 0xFC	; 252
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	9b 81       	ldd	r25, Y+3	; 0x03
     534:	0e 94 14 01 	call	0x228	; 0x228 <calc_raw_data>
		to_string(temp_sign, temperature, temperature_str, humidity, humidity_str, illumination, illumination_str);
     538:	ae 84       	ldd	r10, Y+14	; 0x0e
     53a:	bf 84       	ldd	r11, Y+15	; 0x0f
     53c:	ea 84       	ldd	r14, Y+10	; 0x0a
     53e:	fb 84       	ldd	r15, Y+11	; 0x0b
     540:	0c 85       	ldd	r16, Y+12	; 0x0c
     542:	1d 85       	ldd	r17, Y+13	; 0x0d
     544:	4c 81       	ldd	r20, Y+4	; 0x04
     546:	5d 81       	ldd	r21, Y+5	; 0x05
     548:	6e 81       	ldd	r22, Y+6	; 0x06
     54a:	7f 81       	ldd	r23, Y+7	; 0x07
     54c:	de 01       	movw	r26, r28
     54e:	93 96       	adiw	r26, 0x23	; 35
     550:	4d 01       	movw	r8, r26
     552:	ce 01       	movw	r24, r28
     554:	40 96       	adiw	r24, 0x10	; 16
     556:	6c 01       	movw	r12, r24
     558:	9e 01       	movw	r18, r28
     55a:	29 5e       	subi	r18, 0xE9	; 233
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	0e 94 d2 05 	call	0xba4	; 0xba4 <to_string>

		put_string_usart("test temperature: \t");
     564:	8c e2       	ldi	r24, 0x2C	; 44
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		put_string_usart(temperature_str);
     56c:	ce 01       	movw	r24, r28
     56e:	47 96       	adiw	r24, 0x17	; 23
     570:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		put_string_usart(" degC\n");
     574:	80 e4       	ldi	r24, 0x40	; 64
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>

		put_string_usart("test humidity: \t\t");
     57c:	87 e4       	ldi	r24, 0x47	; 71
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		put_string_usart(humidity_str);
     584:	c6 01       	movw	r24, r12
     586:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		put_string_usart(" %\n");
     58a:	89 e5       	ldi	r24, 0x59	; 89
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>

		put_string_usart("test light-intensity: \t");
     592:	8d e5       	ldi	r24, 0x5D	; 93
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		put_string_usart(illumination_str);
     59a:	c4 01       	movw	r24, r8
     59c:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
		put_string_usart(" lux\n\n");
     5a0:	85 e7       	ldi	r24, 0x75	; 117
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 71 06 	call	0xce2	; 0xce2 <put_string_usart>
     5a8:	ae cf       	rjmp	.-164    	; 0x506 <main+0x76>

000005aa <init_onewire>:
#include "config.h"
#include "onewire.h"
#include <util/delay.h>

uint8_t init_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask)
{
     5aa:	dc 01       	movw	r26, r24
     5ac:	fb 01       	movw	r30, r22
	uint8_t response = 0;

	*direction |= mask;				// port output
     5ae:	80 81       	ld	r24, Z
     5b0:	82 2b       	or	r24, r18
     5b2:	80 83       	st	Z, r24
	*port |= mask;					// write 1
     5b4:	8c 91       	ld	r24, X
     5b6:	82 2b       	or	r24, r18
     5b8:	8c 93       	st	X, r24
	*port &= ~mask;					// write 0 - pull the bus low
     5ba:	8c 91       	ld	r24, X
     5bc:	92 2f       	mov	r25, r18
     5be:	90 95       	com	r25
     5c0:	89 23       	and	r24, r25
     5c2:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c4:	af e5       	ldi	r26, 0x5F	; 95
     5c6:	b9 e0       	ldi	r27, 0x09	; 9
     5c8:	11 97       	sbiw	r26, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <init_onewire+0x1e>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <init_onewire+0x24>
     5ce:	00 00       	nop

	_delay_us(600);			

	*direction &= ~mask;			// set port to input - Master goes into receive mode
     5d0:	80 81       	ld	r24, Z
     5d2:	98 23       	and	r25, r24
     5d4:	90 83       	st	Z, r25
     5d6:	e7 e1       	ldi	r30, 0x17	; 23
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <init_onewire+0x30>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <init_onewire+0x36>
     5e0:	00 00       	nop
	
	_delay_us(70);					// rising edge and waits 15-60us device tx a presence pulse by pulling the bus low
									// 500 + 70 -> for a minimum of 480us	
	response = *port_in & mask;		// 0: comm ok, 1: comm error
     5e2:	da 01       	movw	r26, r20
     5e4:	8c 91       	ld	r24, X
     5e6:	ef e1       	ldi	r30, 0x1F	; 31
     5e8:	f3 e0       	ldi	r31, 0x03	; 3
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <init_onewire+0x40>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <init_onewire+0x46>
     5f0:	00 00       	nop
     5f2:	af ea       	ldi	r26, 0xAF	; 175
     5f4:	b4 e0       	ldi	r27, 0x04	; 4
     5f6:	11 97       	sbiw	r26, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <init_onewire+0x4c>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <init_onewire+0x52>
     5fc:	00 00       	nop

	_delay_us(200);					// presence pulse 60 - 240us
	_delay_us(300);

	return response != 0? ONEWIRE_COMM_ERR : ONEWIRE_COMM_OK;	// 0: comm ok, 1: comm error
     5fe:	28 23       	and	r18, r24
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	09 f4       	brne	.+2      	; 0x606 <init_onewire+0x5c>
     604:	80 e0       	ldi	r24, 0x00	; 0
}
     606:	08 95       	ret

00000608 <write_bit_onewire>:

uint8_t write_bit_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t bit)
{
     608:	0f 93       	push	r16
     60a:	fc 01       	movw	r30, r24
	*direction |= mask;
     60c:	db 01       	movw	r26, r22
     60e:	8c 91       	ld	r24, X
     610:	82 2b       	or	r24, r18
     612:	8c 93       	st	X, r24
	*port |= mask;					// Write 1
     614:	80 81       	ld	r24, Z
     616:	82 2b       	or	r24, r18
     618:	80 83       	st	Z, r24
	*port &= ~mask;					// Write 0
     61a:	80 81       	ld	r24, Z
     61c:	92 2f       	mov	r25, r18
     61e:	90 95       	com	r25
     620:	89 23       	and	r24, r25
     622:	80 83       	st	Z, r24

	if (bit != 0)
     624:	00 23       	and	r16, r16
     626:	71 f0       	breq	.+28     	; 0x644 <write_bit_onewire+0x3c>
     628:	ba e2       	ldi	r27, 0x2A	; 42
     62a:	ba 95       	dec	r27
     62c:	f1 f7       	brne	.-4      	; 0x62a <write_bit_onewire+0x22>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <write_bit_onewire+0x28>
	else
	{
		_delay_us(80);				// the bus master must continue to hold the bus low for the duration of the time slot(at least 60us)
	}
	
	*port |= mask;
     630:	80 81       	ld	r24, Z
     632:	28 2b       	or	r18, r24
     634:	20 83       	st	Z, r18
     636:	8f e3       	ldi	r24, 0x3F	; 63
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <write_bit_onewire+0x32>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <write_bit_onewire+0x38>
     640:	00 00       	nop
     642:	0d c0       	rjmp	.+26     	; 0x65e <write_bit_onewire+0x56>
     644:	af e3       	ldi	r26, 0x3F	; 63
     646:	b1 e0       	ldi	r27, 0x01	; 1
     648:	11 97       	sbiw	r26, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <write_bit_onewire+0x40>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <write_bit_onewire+0x46>
     64e:	00 00       	nop
     650:	80 81       	ld	r24, Z
     652:	28 2b       	or	r18, r24
     654:	20 83       	st	Z, r18
     656:	ba e0       	ldi	r27, 0x0A	; 10
     658:	ba 95       	dec	r27
     65a:	f1 f7       	brne	.-4      	; 0x658 <write_bit_onewire+0x50>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <write_bit_onewire+0x56>
	else
	{
		_delay_us(2);
	}

	return bit != 0;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	01 11       	cpse	r16, r1
     662:	01 c0       	rjmp	.+2      	; 0x666 <write_bit_onewire+0x5e>
     664:	80 e0       	ldi	r24, 0x00	; 0
}
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <write_onewire>:

void write_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t data)
{
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	4c 01       	movw	r8, r24
     684:	5b 01       	movw	r10, r22
     686:	6a 01       	movw	r12, r20
     688:	12 2f       	mov	r17, r18
     68a:	d0 2f       	mov	r29, r16
     68c:	68 94       	set
     68e:	ee 24       	eor	r14, r14
     690:	e3 f8       	bld	r14, 3
     692:	f1 2c       	mov	r15, r1
	uint8_t i = 0;

	for(i = 1; i != 0; i <<= 1)
     694:	c1 e0       	ldi	r28, 0x01	; 1
	{
		write_bit_onewire(port, direction, port_in, mask, data & i);
     696:	0d 2f       	mov	r16, r29
     698:	0c 23       	and	r16, r28
     69a:	21 2f       	mov	r18, r17
     69c:	a6 01       	movw	r20, r12
     69e:	b5 01       	movw	r22, r10
     6a0:	c4 01       	movw	r24, r8
     6a2:	0e 94 04 03 	call	0x608	; 0x608 <write_bit_onewire>

void write_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask, uint8_t data)
{
	uint8_t i = 0;

	for(i = 1; i != 0; i <<= 1)
     6a6:	cc 0f       	add	r28, r28
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	e8 1a       	sub	r14, r24
     6ac:	f1 08       	sbc	r15, r1
     6ae:	99 f7       	brne	.-26     	; 0x696 <write_onewire+0x2c>
	{
		write_bit_onewire(port, direction, port_in, mask, data & i);
	}
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	bf 90       	pop	r11
     6c2:	af 90       	pop	r10
     6c4:	9f 90       	pop	r9
     6c6:	8f 90       	pop	r8
     6c8:	08 95       	ret

000006ca <read_bit_onewire>:

uint8_t read_bit_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask)
{
     6ca:	dc 01       	movw	r26, r24
     6cc:	fb 01       	movw	r30, r22
	uint8_t bit = 0;

	*direction |= mask;
     6ce:	80 81       	ld	r24, Z
     6d0:	82 2b       	or	r24, r18
     6d2:	80 83       	st	Z, r24
	*port |= mask;					// Write 1
     6d4:	8c 91       	ld	r24, X
     6d6:	82 2b       	or	r24, r18
     6d8:	8c 93       	st	X, r24
	*port &= ~mask;					// Write 0
     6da:	8c 91       	ld	r24, X
     6dc:	92 2f       	mov	r25, r18
     6de:	90 95       	com	r25
     6e0:	89 23       	and	r24, r25
     6e2:	8c 93       	st	X, r24
     6e4:	8a e0       	ldi	r24, 0x0A	; 10
     6e6:	8a 95       	dec	r24
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <read_bit_onewire+0x1c>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <read_bit_onewire+0x22>

	_delay_us(2);
	*direction &= ~mask;			// Set port as input
     6ec:	80 81       	ld	r24, Z
     6ee:	98 23       	and	r25, r24
     6f0:	90 83       	st	Z, r25
     6f2:	ea e1       	ldi	r30, 0x1A	; 26
     6f4:	ea 95       	dec	r30
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <read_bit_onewire+0x2a>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <read_bit_onewire+0x30>
	_delay_us(5);
	bit = ((*port_in & mask) != 0);	// Read input
     6fa:	fa 01       	movw	r30, r20
     6fc:	80 81       	ld	r24, Z
     6fe:	ef ee       	ldi	r30, 0xEF	; 239
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <read_bit_onewire+0x38>
     706:	00 c0       	rjmp	.+0      	; 0x708 <read_bit_onewire+0x3e>
     708:	00 00       	nop
	_delay_us(60);

	return bit;
     70a:	28 23       	and	r18, r24
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	09 f4       	brne	.+2      	; 0x712 <read_bit_onewire+0x48>
     710:	80 e0       	ldi	r24, 0x00	; 0
}
     712:	08 95       	ret

00000714 <read_onewire>:

uint8_t read_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask)
{
     714:	9f 92       	push	r9
     716:	af 92       	push	r10
     718:	bf 92       	push	r11
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	5c 01       	movw	r10, r24
     72c:	6b 01       	movw	r12, r22
     72e:	7a 01       	movw	r14, r20
     730:	92 2e       	mov	r9, r18
     732:	08 e0       	ldi	r16, 0x08	; 8
     734:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data = 0;
	uint8_t i = 0;

	for(i = 1; i != 0; i <<= 1)
     736:	c1 e0       	ldi	r28, 0x01	; 1
	return bit;
}

uint8_t read_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask)
{
	uint8_t data = 0;
     738:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0;

	for(i = 1; i != 0; i <<= 1)
	{
		data |= read_bit_onewire(port, direction, port_in, mask) * i;
     73a:	29 2d       	mov	r18, r9
     73c:	a7 01       	movw	r20, r14
     73e:	b6 01       	movw	r22, r12
     740:	c5 01       	movw	r24, r10
     742:	0e 94 65 03 	call	0x6ca	; 0x6ca <read_bit_onewire>
     746:	8c 9f       	mul	r24, r28
     748:	c0 01       	movw	r24, r0
     74a:	11 24       	eor	r1, r1
     74c:	d8 2b       	or	r29, r24
uint8_t read_onewire(volatile uint8_t* port, volatile uint8_t* direction, volatile uint8_t* port_in, uint8_t mask)
{
	uint8_t data = 0;
	uint8_t i = 0;

	for(i = 1; i != 0; i <<= 1)
     74e:	cc 0f       	add	r28, r28
     750:	01 50       	subi	r16, 0x01	; 1
     752:	11 09       	sbc	r17, r1
     754:	91 f7       	brne	.-28     	; 0x73a <read_onewire+0x26>
	{
		data |= read_bit_onewire(port, direction, port_in, mask) * i;
	}

	return data;
     756:	8d 2f       	mov	r24, r29
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	df 90       	pop	r13
     766:	cf 90       	pop	r12
     768:	bf 90       	pop	r11
     76a:	af 90       	pop	r10
     76c:	9f 90       	pop	r9
     76e:	08 95       	ret

00000770 <read_temperature>:
	read_humidity(raw_humi_data);
	read_light(raw_illum_data);
}

void read_temperature(int16_t* raw_temp_data)
{
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	7c 01       	movw	r14, r24
	convert_ds18b20(&PORTB, &DDRB, &PINB, (1 << 1), NULL);
     77a:	00 e0       	ldi	r16, 0x00	; 0
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	22 e0       	ldi	r18, 0x02	; 2
     780:	43 e2       	ldi	r20, 0x23	; 35
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	64 e2       	ldi	r22, 0x24	; 36
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	85 e2       	ldi	r24, 0x25	; 37
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 09 02 	call	0x412	; 0x412 <convert_ds18b20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     790:	2f ef       	ldi	r18, 0xFF	; 255
     792:	83 ed       	ldi	r24, 0xD3	; 211
     794:	90 e3       	ldi	r25, 0x30	; 48
     796:	21 50       	subi	r18, 0x01	; 1
     798:	80 40       	sbci	r24, 0x00	; 0
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <read_temperature+0x26>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <read_temperature+0x30>
     7a0:	00 00       	nop

	_delay_ms(1000);

	read_ds18b20(&PORTB, &DDRB, &PINB, (1 << 1), NULL, raw_temp_data);
     7a2:	22 e0       	ldi	r18, 0x02	; 2
     7a4:	43 e2       	ldi	r20, 0x23	; 35
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	64 e2       	ldi	r22, 0x24	; 36
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	85 e2       	ldi	r24, 0x25	; 37
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 cd 01 	call	0x39a	; 0x39a <read_ds18b20>
}
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	08 95       	ret

000007be <read_humidity>:

void read_humidity(uint16_t* raw_humi_data)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
	*raw_humi_data = read_adc(0);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 64 00 	call	0xc8	; 0xc8 <read_adc>
     7ca:	99 83       	std	Y+1, r25	; 0x01
     7cc:	88 83       	st	Y, r24
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <read_sensors>:
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

void read_sensors(int16_t* raw_temp_data, uint16_t* raw_humi_data, uint16_t* raw_illum_data)
{
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	8b 01       	movw	r16, r22
     7de:	ea 01       	movw	r28, r20
	read_temperature(raw_temp_data);
     7e0:	0e 94 b8 03 	call	0x770	; 0x770 <read_temperature>
	read_humidity(raw_humi_data);
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 df 03 	call	0x7be	; 0x7be <read_humidity>
	*raw_humi_data = read_adc(0);
}

void read_light(uint16_t* raw_illum_data)
{
	read_bh1750_data(raw_illum_data);
     7ea:	ce 01       	movw	r24, r28
     7ec:	0e 94 82 00 	call	0x104	; 0x104 <read_bh1750_data>
void read_sensors(int16_t* raw_temp_data, uint16_t* raw_humi_data, uint16_t* raw_illum_data)
{
	read_temperature(raw_temp_data);
	read_humidity(raw_humi_data);
	read_light(raw_illum_data);
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <__vector_10>:
volatile uint8_t T1ovs1 = 0, T1ovs2 = 0;
volatile uint8_t capt1 = 0, capt2 = 0, capt3 = 0;
volatile uint8_t dutyCycle = 0;

ISR(TIMER1_CAPT_vect)
{
     7fa:	1f 92       	push	r1
     7fc:	0f 92       	push	r0
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	if(flag == 0)
     80c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <flag>
     810:	81 11       	cpse	r24, r1
     812:	0e c0       	rjmp	.+28     	; 0x830 <__vector_10+0x36>
	{
		capt1 = ICR1;
     814:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     818:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     81c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <capt1>
		TCCR1B &= ~(1 << ICES1); //falling edge
     820:	e1 e8       	ldi	r30, 0x81	; 129
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8f 7b       	andi	r24, 0xBF	; 191
     828:	80 83       	st	Z, r24
		T1ovs2 = 0;
     82a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <T1ovs2>
     82e:	23 c0       	rjmp	.+70     	; 0x876 <__vector_10+0x7c>
	}
	else if(flag == 1)
     830:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <flag>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	81 f4       	brne	.+32     	; 0x858 <__vector_10+0x5e>
	{
		capt2 = ICR1;
     838:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     83c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     840:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <capt2>
		TCCR1B |= (1 << ICES1);	//rising edge
     844:	e1 e8       	ldi	r30, 0x81	; 129
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	80 64       	ori	r24, 0x40	; 64
     84c:	80 83       	st	Z, r24
		T1ovs1 = T1ovs2;
     84e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <T1ovs2>
     852:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <T1ovs1>
     856:	0f c0       	rjmp	.+30     	; 0x876 <__vector_10+0x7c>
	}
	else if(flag == 2)
     858:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <flag>
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	59 f4       	brne	.+22     	; 0x876 <__vector_10+0x7c>
	{
		capt3 = ICR1;
     860:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     864:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     868:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
		TIMSK1 &= ~( (1 << ICIE1) | (1 << TOIE1) );
     86c:	ef e6       	ldi	r30, 0x6F	; 111
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	8e 7d       	andi	r24, 0xDE	; 222
     874:	80 83       	st	Z, r24
	}
	flag++;
     876:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <flag>
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <flag>
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_13>:


ISR(TIMER1_OVF_vect)
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
	// LED check
	// PORTB ^= ((1 << PORTB1) | (1 << PORTB2));
	
	T1ovs2++;
     8a0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <T1ovs2>
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <T1ovs2>

	TCNT1 = 63536;
     8aa:	80 e3       	ldi	r24, 0x30	; 48
     8ac:	98 ef       	ldi	r25, 0xF8	; 248
     8ae:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8b2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <init_timer1>:

void init_timer1(void)
{
	//TCNT1 = 61535;
	TCNT1 = 63536;
     8c4:	80 e3       	ldi	r24, 0x30	; 48
     8c6:	98 ef       	ldi	r25, 0xF8	; 248
     8c8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8cc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	/* |	COM1A1	|	COM1A0	|	flCOM1B1	|	COM1B0	|	-	|	-	|	WGM11	|	WGM10	| */
	/* TCCR1A = 0x00; -> disable all waveform functions */
	/* p134 - Normal port operation, OC1A/OC1B disconnected */
	TCCR1A = 0x00;	
     8d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		ICES1: 1				- rising edge triggered
		CS12 CS11 CS10: 010		- clk/8(From prescaler)
		CS12 CS11 CS10: 101		- clk/1024(From prescaler)
	*/
	//TCCR1B = ( (1 << ICES1) | (1 << CS12) | (1 << CS10) );
	TCCR1B = ( (1 << ICES1) | (1 << CS11) );
     8d4:	82 e4       	ldi	r24, 0x42	; 66
     8d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	/*
		p139
		ICIE1: TImer/Counter1, Input Capture Interrupt Enable
		TOIE1: Timer/Counter1, Overflow Interrupt Enable
	*/
	TIMSK1 = ( (1 << ICIE1) | (1 << TOIE1) );
     8da:	81 e2       	ldi	r24, 0x21	; 33
     8dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	sei();
     8e0:	78 94       	sei
     8e2:	08 95       	ret

000008e4 <integral_to_string>:
	strcat(temperature_str, integralStr);
	strcat(temperature_str, fractionalStr);
}

void integral_to_string(float data, char* integral_str)
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	ea 01       	movw	r28, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8ea:	0e 94 5f 07 	call	0xebe	; 0xebe <__fixsfsi>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	4a e0       	ldi	r20, 0x0A	; 10
     8f4:	be 01       	movw	r22, r28
     8f6:	0e 94 b6 08 	call	0x116c	; 0x116c <__itoa_ncheck>
	itoa((int16_t)(data), integral_str, 10);
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <illum_to_string>:
#include "tostring.h"
#include <string.h>
#include <stdlib.h>

void illum_to_string(uint16_t illumination, char* illumination_str)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	8c 01       	movw	r16, r24
     90a:	eb 01       	movw	r28, r22
	memset(illumination_str, 0, strlen(illumination_str));
     90c:	fb 01       	movw	r30, r22
     90e:	01 90       	ld	r0, Z+
     910:	00 20       	and	r0, r0
     912:	e9 f7       	brne	.-6      	; 0x90e <illum_to_string+0xe>
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	af 01       	movw	r20, r30
     918:	46 1b       	sub	r20, r22
     91a:	57 0b       	sbc	r21, r23
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	0e 94 a4 08 	call	0x1148	; 0x1148 <memset>
	integral_to_string(illumination, illumination_str);
     926:	b8 01       	movw	r22, r16
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 95 07 	call	0xf2a	; 0xf2a <__floatunsisf>
     930:	ae 01       	movw	r20, r28
     932:	0e 94 72 04 	call	0x8e4	; 0x8e4 <integral_to_string>
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <ipow>:
{
	itoa((int16_t)(data), integral_str, 10);
}

uint16_t ipow(uint16_t base, volatile uint8_t exponential)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	1f 92       	push	r1
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	9c 01       	movw	r18, r24
     94c:	69 83       	std	Y+1, r22	; 0x01
	uint16_t result = 1;

	while(exponential > 0)
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	88 23       	and	r24, r24
     952:	d9 f0       	breq	.+54     	; 0x98a <ipow+0x4a>
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	50 e0       	ldi	r21, 0x00	; 0
	{
		if(exponential & 1)
     958:	99 81       	ldd	r25, Y+1	; 0x01
     95a:	90 ff       	sbrs	r25, 0
     95c:	08 c0       	rjmp	.+16     	; 0x96e <ipow+0x2e>
		{
			result *= base;
     95e:	ca 01       	movw	r24, r20
     960:	82 9f       	mul	r24, r18
     962:	a0 01       	movw	r20, r0
     964:	83 9f       	mul	r24, r19
     966:	50 0d       	add	r21, r0
     968:	92 9f       	mul	r25, r18
     96a:	50 0d       	add	r21, r0
     96c:	11 24       	eor	r1, r1
		}
		base *= base;
     96e:	c9 01       	movw	r24, r18
     970:	88 9f       	mul	r24, r24
     972:	90 01       	movw	r18, r0
     974:	89 9f       	mul	r24, r25
     976:	30 0d       	add	r19, r0
     978:	30 0d       	add	r19, r0
     97a:	11 24       	eor	r1, r1
		exponential >>= 1;
     97c:	99 81       	ldd	r25, Y+1	; 0x01
     97e:	96 95       	lsr	r25
     980:	99 83       	std	Y+1, r25	; 0x01

uint16_t ipow(uint16_t base, volatile uint8_t exponential)
{
	uint16_t result = 1;

	while(exponential > 0)
     982:	99 81       	ldd	r25, Y+1	; 0x01
     984:	91 11       	cpse	r25, r1
     986:	e8 cf       	rjmp	.-48     	; 0x958 <ipow+0x18>
     988:	02 c0       	rjmp	.+4      	; 0x98e <ipow+0x4e>
	itoa((int16_t)(data), integral_str, 10);
}

uint16_t ipow(uint16_t base, volatile uint8_t exponential)
{
	uint16_t result = 1;
     98a:	41 e0       	ldi	r20, 0x01	; 1
     98c:	50 e0       	ldi	r21, 0x00	; 0
		base *= base;
		exponential >>= 1;
	}

	return result;
}
     98e:	ca 01       	movw	r24, r20
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <fractional_to_string>:

void fractional_to_string(float data, char* fractional_str)
{
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	6b 01       	movw	r12, r22
     9aa:	7c 01       	movw	r14, r24
     9ac:	ea 01       	movw	r28, r20
	uint8_t tmp = 0;
	uint16_t fraction = (data - (int16_t)(data)) * 100;
     9ae:	0e 94 5f 07 	call	0xebe	; 0xebe <__fixsfsi>
     9b2:	07 2e       	mov	r0, r23
     9b4:	00 0c       	add	r0, r0
     9b6:	88 0b       	sbc	r24, r24
     9b8:	99 0b       	sbc	r25, r25
     9ba:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     9be:	9b 01       	movw	r18, r22
     9c0:	ac 01       	movw	r20, r24
     9c2:	c7 01       	movw	r24, r14
     9c4:	b6 01       	movw	r22, r12
     9c6:	0e 94 80 06 	call	0xd00	; 0xd00 <__subsf3>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	48 ec       	ldi	r20, 0xC8	; 200
     9d0:	52 e4       	ldi	r21, 0x42	; 66
     9d2:	0e 94 23 08 	call	0x1046	; 0x1046 <__mulsf3>
     9d6:	0e 94 66 07 	call	0xecc	; 0xecc <__fixunssfsi>
     9da:	8b 01       	movw	r16, r22

	*fractional_str++ = '.';
     9dc:	8e e2       	ldi	r24, 0x2E	; 46
     9de:	88 83       	st	Y, r24

	tmp = (uint8_t)(fraction / ipow(10, 1));
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	8a e0       	ldi	r24, 0x0A	; 10
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 a0 04 	call	0x940	; 0x940 <ipow>
     9ea:	bc 01       	movw	r22, r24
	*fractional_str++ = 48+tmp;
     9ec:	c8 01       	movw	r24, r16
     9ee:	0e 94 90 08 	call	0x1120	; 0x1120 <__udivmodhi4>
     9f2:	60 5d       	subi	r22, 0xD0	; 208
     9f4:	69 83       	std	Y+1, r22	; 0x01
	fraction = (fraction % ipow(10, 1));
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	8a e0       	ldi	r24, 0x0A	; 10
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 a0 04 	call	0x940	; 0x940 <ipow>
     a00:	bc 01       	movw	r22, r24
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 90 08 	call	0x1120	; 0x1120 <__udivmodhi4>
     a08:	8c 01       	movw	r16, r24

	tmp = (uint8_t)(fraction / ipow(10, 0));
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 a0 04 	call	0x940	; 0x940 <ipow>
     a14:	bc 01       	movw	r22, r24
	*fractional_str++ = 48+tmp;
     a16:	c8 01       	movw	r24, r16
     a18:	0e 94 90 08 	call	0x1120	; 0x1120 <__udivmodhi4>
     a1c:	60 5d       	subi	r22, 0xD0	; 208
     a1e:	6a 83       	std	Y+2, r22	; 0x02
	fraction = (fraction % ipow(10, 0));
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	8a e0       	ldi	r24, 0x0A	; 10
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 a0 04 	call	0x940	; 0x940 <ipow>

	*fractional_str = '\0';
     a2a:	1b 82       	std	Y+3, r1	; 0x03
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	08 95       	ret

00000a3e <humi_to_string>:
	memset(illumination_str, 0, strlen(illumination_str));
	integral_to_string(illumination, illumination_str);
}

void humi_to_string(float humidity, char* humidity_str)
{
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	27 97       	sbiw	r28, 0x07	; 7
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	6b 01       	movw	r12, r22
     a60:	7c 01       	movw	r14, r24
     a62:	8a 01       	movw	r16, r20
	char integralStr[3] = {0};
     a64:	19 82       	std	Y+1, r1	; 0x01
     a66:	1a 82       	std	Y+2, r1	; 0x02
     a68:	1b 82       	std	Y+3, r1	; 0x03
	char fractionalStr[4] = {0};
     a6a:	1c 82       	std	Y+4, r1	; 0x04
     a6c:	1d 82       	std	Y+5, r1	; 0x05
     a6e:	1e 82       	std	Y+6, r1	; 0x06
     a70:	1f 82       	std	Y+7, r1	; 0x07
	memset(humidity_str, 0, strlen(humidity_str));
     a72:	fa 01       	movw	r30, r20
     a74:	01 90       	ld	r0, Z+
     a76:	00 20       	and	r0, r0
     a78:	e9 f7       	brne	.-6      	; 0xa74 <humi_to_string+0x36>
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	af 01       	movw	r20, r30
     a7e:	40 1b       	sub	r20, r16
     a80:	51 0b       	sbc	r21, r17
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	c8 01       	movw	r24, r16
     a88:	0e 94 a4 08 	call	0x1148	; 0x1148 <memset>

	integral_to_string(humidity, integralStr);
     a8c:	ae 01       	movw	r20, r28
     a8e:	4f 5f       	subi	r20, 0xFF	; 255
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	0e 94 72 04 	call	0x8e4	; 0x8e4 <integral_to_string>
	fractional_to_string(humidity, fractionalStr);
     a9a:	ae 01       	movw	r20, r28
     a9c:	4c 5f       	subi	r20, 0xFC	; 252
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	c7 01       	movw	r24, r14
     aa2:	b6 01       	movw	r22, r12
     aa4:	0e 94 cc 04 	call	0x998	; 0x998 <fractional_to_string>

	strcat(humidity_str, integralStr);
     aa8:	be 01       	movw	r22, r28
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	c8 01       	movw	r24, r16
     ab0:	0e 94 ab 08 	call	0x1156	; 0x1156 <strcat>
	strcat(humidity_str, fractionalStr);
     ab4:	be 01       	movw	r22, r28
     ab6:	6c 5f       	subi	r22, 0xFC	; 252
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 ab 08 	call	0x1156	; 0x1156 <strcat>
}
     ac0:	27 96       	adiw	r28, 0x07	; 7
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	08 95       	ret

00000ade <temp_to_string>:

void temp_to_string(int8_t sign, float temperature, char* temperature_str)
{
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	29 97       	sbiw	r28, 0x09	; 9
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	b8 2e       	mov	r11, r24
     b02:	6a 01       	movw	r12, r20
     b04:	7b 01       	movw	r14, r22
     b06:	89 01       	movw	r16, r18
	char integralStr[5] = {0};
     b08:	fe 01       	movw	r30, r28
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	df 01       	movw	r26, r30
     b10:	1d 92       	st	X+, r1
     b12:	8a 95       	dec	r24
     b14:	e9 f7       	brne	.-6      	; 0xb10 <temp_to_string+0x32>
	char fractionalStr[4] = {0};
     b16:	1e 82       	std	Y+6, r1	; 0x06
     b18:	1f 82       	std	Y+7, r1	; 0x07
     b1a:	18 86       	std	Y+8, r1	; 0x08
     b1c:	19 86       	std	Y+9, r1	; 0x09
	memset(temperature_str, 0, strlen(temperature_str));
     b1e:	f9 01       	movw	r30, r18
     b20:	01 90       	ld	r0, Z+
     b22:	00 20       	and	r0, r0
     b24:	e9 f7       	brne	.-6      	; 0xb20 <temp_to_string+0x42>
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	af 01       	movw	r20, r30
     b2a:	42 1b       	sub	r20, r18
     b2c:	53 0b       	sbc	r21, r19
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	c9 01       	movw	r24, r18
     b34:	0e 94 a4 08 	call	0x1148	; 0x1148 <memset>

	if(sign == 1)
     b38:	b1 e0       	ldi	r27, 0x01	; 1
     b3a:	bb 12       	cpse	r11, r27
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <temp_to_string+0x72>
	{
		strcat(temperature_str, "-");
     b3e:	f8 01       	movw	r30, r16
     b40:	01 90       	ld	r0, Z+
     b42:	00 20       	and	r0, r0
     b44:	e9 f7       	brne	.-6      	; 0xb40 <temp_to_string+0x62>
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	8d e2       	ldi	r24, 0x2D	; 45
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	91 83       	std	Z+1, r25	; 0x01
     b4e:	80 83       	st	Z, r24
	else
	{
		;
	}

	integral_to_string(temperature, integralStr);
     b50:	ae 01       	movw	r20, r28
     b52:	4f 5f       	subi	r20, 0xFF	; 255
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <integral_to_string>
	fractional_to_string(temperature, fractionalStr);
     b5e:	ae 01       	movw	r20, r28
     b60:	4a 5f       	subi	r20, 0xFA	; 250
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	0e 94 cc 04 	call	0x998	; 0x998 <fractional_to_string>

	strcat(temperature_str, integralStr);
     b6c:	be 01       	movw	r22, r28
     b6e:	6f 5f       	subi	r22, 0xFF	; 255
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 ab 08 	call	0x1156	; 0x1156 <strcat>
	strcat(temperature_str, fractionalStr);
     b78:	be 01       	movw	r22, r28
     b7a:	6a 5f       	subi	r22, 0xFA	; 250
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	c8 01       	movw	r24, r16
     b80:	0e 94 ab 08 	call	0x1156	; 0x1156 <strcat>
}
     b84:	29 96       	adiw	r28, 0x09	; 9
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	08 95       	ret

00000ba4 <to_string>:

	*fractional_str = '\0';
}

void to_string(int8_t sign, float temperature, char* temperature_str, float humidity, char* humidity_str, uint16_t illumination, char* illumination_str)
{
     ba4:	4f 92       	push	r4
     ba6:	5f 92       	push	r5
     ba8:	6f 92       	push	r6
     baa:	7f 92       	push	r7
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
	temp_to_string(sign, temperature, temperature_str);
     bc8:	0e 94 6f 05 	call	0xade	; 0xade <temp_to_string>
	humi_to_string(humidity, humidity_str);
     bcc:	a6 01       	movw	r20, r12
     bce:	c8 01       	movw	r24, r16
     bd0:	b7 01       	movw	r22, r14
     bd2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <humi_to_string>
	illum_to_string(illumination, illumination_str);
     bd6:	b4 01       	movw	r22, r8
     bd8:	c5 01       	movw	r24, r10
     bda:	0e 94 80 04 	call	0x900	; 0x900 <illum_to_string>
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	08 95       	ret

00000c00 <init_twowire>:
	{
		return 1;	// error
	}

	return 0;
}
     c00:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c04:	8a e2       	ldi	r24, 0x2A	; 42
     c06:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     c0a:	08 95       	ret

00000c0c <start_wait_twowire>:

void start_wait_twowire(uint8_t address)
{
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
	uint8_t twi_status;

	while(1)
	{
		// Send START condition
		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     c10:	ec eb       	ldi	r30, 0xBC	; 188
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	24 ea       	ldi	r18, 0xA4	; 164

		// Wait until transmission completed
		while(!(TWCR & (1 << TWINT)));

		// check value of TWI status register. Mask prescaler bits.
		twi_status = TWSR & 0xF8;
     c16:	a9 eb       	ldi	r26, 0xB9	; 185
     c18:	b0 e0       	ldi	r27, 0x00	; 0
		if((twi_status != TWI_START) && (twi_status != TWI_REP_START)) continue;

		// send device address
		TWDR = address;
     c1a:	cb eb       	ldi	r28, 0xBB	; 187
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = ((1 << TWINT) | (1 << TWEN));
     c1e:	34 e8       	ldi	r19, 0x84	; 132
		// Check value of TWI status register. Mask prescaler bits.
		twi_status = TWSR & 0xF8;
		if((twi_status == TWI_MTX_SLA_NACK) || (twi_status == TWI_MTX_DAT_NACK))
		{
			// device busy, send stop condition to terminate write operation
			TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWSTO));
     c20:	44 e9       	ldi	r20, 0x94	; 148
	uint8_t twi_status;

	while(1)
	{
		// Send START condition
		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
     c22:	20 83       	st	Z, r18

		// Wait until transmission completed
		while(!(TWCR & (1 << TWINT)));
     c24:	90 81       	ld	r25, Z
     c26:	99 23       	and	r25, r25
     c28:	ec f7       	brge	.-6      	; 0xc24 <start_wait_twowire+0x18>

		// check value of TWI status register. Mask prescaler bits.
		twi_status = TWSR & 0xF8;
     c2a:	9c 91       	ld	r25, X
     c2c:	98 7f       	andi	r25, 0xF8	; 248
		if((twi_status != TWI_START) && (twi_status != TWI_REP_START)) continue;
     c2e:	98 30       	cpi	r25, 0x08	; 8
     c30:	11 f0       	breq	.+4      	; 0xc36 <start_wait_twowire+0x2a>
     c32:	90 31       	cpi	r25, 0x10	; 16
     c34:	b1 f7       	brne	.-20     	; 0xc22 <start_wait_twowire+0x16>

		// send device address
		TWDR = address;
     c36:	88 83       	st	Y, r24
		TWCR = ((1 << TWINT) | (1 << TWEN));
     c38:	30 83       	st	Z, r19

		// Wait until transmission completed
		while(!(TWCR & (1 << TWINT)));
     c3a:	90 81       	ld	r25, Z
     c3c:	99 23       	and	r25, r25
     c3e:	ec f7       	brge	.-6      	; 0xc3a <start_wait_twowire+0x2e>

		// Check value of TWI status register. Mask prescaler bits.
		twi_status = TWSR & 0xF8;
     c40:	9c 91       	ld	r25, X
		if((twi_status == TWI_MTX_SLA_NACK) || (twi_status == TWI_MTX_DAT_NACK))
     c42:	98 7e       	andi	r25, 0xE8	; 232
     c44:	90 32       	cpi	r25, 0x20	; 32
     c46:	29 f4       	brne	.+10     	; 0xc52 <start_wait_twowire+0x46>
		{
			// device busy, send stop condition to terminate write operation
			TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWSTO));
     c48:	40 83       	st	Z, r20

			// Wait until stop condition is executed and bus released
			while(TWCR & (1 << TWSTO));
     c4a:	90 81       	ld	r25, Z
     c4c:	94 fd       	sbrc	r25, 4
     c4e:	fd cf       	rjmp	.-6      	; 0xc4a <start_wait_twowire+0x3e>
     c50:	e8 cf       	rjmp	.-48     	; 0xc22 <start_wait_twowire+0x16>

			continue;
		}
		break;
	}
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <stop_twowire>:

void stop_twowire(void)
{
	// Send STOP condition
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     c58:	84 e9       	ldi	r24, 0x94	; 148
     c5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// When the STOP condition is executed on the bus, the TWSTO bit is cleared automatically
	while(TWCR & (1 << TWSTO));
     c5e:	ec eb       	ldi	r30, 0xBC	; 188
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	84 fd       	sbrc	r24, 4
     c66:	fd cf       	rjmp	.-6      	; 0xc62 <stop_twowire+0xa>
}
     c68:	08 95       	ret

00000c6a <write_twowire>:
uint8_t write_twowire(uint8_t data)
{
	uint8_t twi_status = 0;

	// Send data
	TWDR = data;
     c6a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1 << TWINT) | (1 << TWEN));
     c6e:	84 e8       	ldi	r24, 0x84	; 132
     c70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// Wait until transmission completed
	while(!(TWCR & (1 << TWINT)));
     c74:	ec eb       	ldi	r30, 0xBC	; 188
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 23       	and	r24, r24
     c7c:	ec f7       	brge	.-6      	; 0xc78 <write_twowire+0xe>

	twi_status = TWSR & 0xF8;
     c7e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c82:	98 7f       	andi	r25, 0xF8	; 248
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	98 32       	cpi	r25, 0x28	; 40
     c88:	09 f4       	brne	.+2      	; 0xc8c <write_twowire+0x22>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
	if(twi_status != TWI_MTX_DAT_ACK)
	{
		return 1;	// error
	}
	return 0;
}
     c8c:	08 95       	ret

00000c8e <read_ack_twowire>:

uint8_t read_ack_twowire(void)
{
	TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
     c8e:	84 ec       	ldi	r24, 0xC4	; 196
     c90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(!(TWCR & (1 << TWINT)));
     c94:	ec eb       	ldi	r30, 0xBC	; 188
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	88 23       	and	r24, r24
     c9c:	ec f7       	brge	.-6      	; 0xc98 <read_ack_twowire+0xa>

	return TWDR;
     c9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
     ca2:	08 95       	ret

00000ca4 <read_nack_twowire>:

uint8_t read_nack_twowire(void)
{
	TWCR = ((1 << TWINT) | (1 << TWEN));
     ca4:	84 e8       	ldi	r24, 0x84	; 132
     ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(!(TWCR & (1 << TWINT)));
     caa:	ec eb       	ldi	r30, 0xBC	; 188
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 23       	and	r24, r24
     cb2:	ec f7       	brge	.-6      	; 0xcae <read_nack_twowire+0xa>

	return TWDR;
     cb4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     cb8:	08 95       	ret

00000cba <init_usart>:
 #include <avr/io.h>

 void init_usart(void)
 {
	 /* Set Baud Rate */
	 UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
     cba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = (uint8_t)(UBRR_VALUE);
     cbe:	87 e6       	ldi	r24, 0x67	; 103
     cc0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 
	 /* |	RXCIEn	|	TXCIEn	|	UDRIEn	|	RXENn	|	TXENn	|	UCSZn2	|	RXB8n	|	TXB8n	| */
	 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     cc4:	88 e1       	ldi	r24, 0x18	; 24
     cc6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	 /* |	UMSELn1	|	UMSELn0	|	UPMn1	|	UPMn9	|	USBSn	|	UCSZn1	|	UCSZn0	|	UCPOLn	| */
	 // Set frame: Asynchronous, No Parity, 8 data bits, 1 stop bit
	 UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);	
     cca:	86 e0       	ldi	r24, 0x06	; 6
     ccc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     cd0:	08 95       	ret

00000cd2 <send_data_usart>:
 }

 void send_data_usart(unsigned char data)
 {
	 while(!(UCSR0A & (1<<UDRE0)));
     cd2:	e0 ec       	ldi	r30, 0xC0	; 192
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	90 81       	ld	r25, Z
     cd8:	95 ff       	sbrs	r25, 5
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <send_data_usart+0x4>
	 UDR0 = data;
     cdc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ce0:	08 95       	ret

00000ce2 <put_string_usart>:
 }

 void put_string_usart(char* stringPtr)
 {
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
	 while(*stringPtr != 0x00)
     ce8:	88 81       	ld	r24, Y
     cea:	88 23       	and	r24, r24
     cec:	31 f0       	breq	.+12     	; 0xcfa <put_string_usart+0x18>
     cee:	21 96       	adiw	r28, 0x01	; 1
	 {
		 send_data_usart(*stringPtr);
     cf0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <send_data_usart>
	 UDR0 = data;
 }

 void put_string_usart(char* stringPtr)
 {
	 while(*stringPtr != 0x00)
     cf4:	89 91       	ld	r24, Y+
     cf6:	81 11       	cpse	r24, r1
     cf8:	fb cf       	rjmp	.-10     	; 0xcf0 <put_string_usart+0xe>
	 {
		 send_data_usart(*stringPtr);
		 stringPtr++;
	 }
 }
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <__subsf3>:
     d00:	50 58       	subi	r21, 0x80	; 128

00000d02 <__addsf3>:
     d02:	bb 27       	eor	r27, r27
     d04:	aa 27       	eor	r26, r26
     d06:	0e 94 98 06 	call	0xd30	; 0xd30 <__addsf3x>
     d0a:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_round>
     d0e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_pscA>
     d12:	38 f0       	brcs	.+14     	; 0xd22 <__addsf3+0x20>
     d14:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_pscB>
     d18:	20 f0       	brcs	.+8      	; 0xd22 <__addsf3+0x20>
     d1a:	39 f4       	brne	.+14     	; 0xd2a <__addsf3+0x28>
     d1c:	9f 3f       	cpi	r25, 0xFF	; 255
     d1e:	19 f4       	brne	.+6      	; 0xd26 <__addsf3+0x24>
     d20:	26 f4       	brtc	.+8      	; 0xd2a <__addsf3+0x28>
     d22:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>
     d26:	0e f4       	brtc	.+2      	; 0xd2a <__addsf3+0x28>
     d28:	e0 95       	com	r30
     d2a:	e7 fb       	bst	r30, 7
     d2c:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>

00000d30 <__addsf3x>:
     d30:	e9 2f       	mov	r30, r25
     d32:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_split3>
     d36:	58 f3       	brcs	.-42     	; 0xd0e <__addsf3+0xc>
     d38:	ba 17       	cp	r27, r26
     d3a:	62 07       	cpc	r22, r18
     d3c:	73 07       	cpc	r23, r19
     d3e:	84 07       	cpc	r24, r20
     d40:	95 07       	cpc	r25, r21
     d42:	20 f0       	brcs	.+8      	; 0xd4c <__addsf3x+0x1c>
     d44:	79 f4       	brne	.+30     	; 0xd64 <__addsf3x+0x34>
     d46:	a6 f5       	brtc	.+104    	; 0xdb0 <__addsf3x+0x80>
     d48:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_zero>
     d4c:	0e f4       	brtc	.+2      	; 0xd50 <__addsf3x+0x20>
     d4e:	e0 95       	com	r30
     d50:	0b 2e       	mov	r0, r27
     d52:	ba 2f       	mov	r27, r26
     d54:	a0 2d       	mov	r26, r0
     d56:	0b 01       	movw	r0, r22
     d58:	b9 01       	movw	r22, r18
     d5a:	90 01       	movw	r18, r0
     d5c:	0c 01       	movw	r0, r24
     d5e:	ca 01       	movw	r24, r20
     d60:	a0 01       	movw	r20, r0
     d62:	11 24       	eor	r1, r1
     d64:	ff 27       	eor	r31, r31
     d66:	59 1b       	sub	r21, r25
     d68:	99 f0       	breq	.+38     	; 0xd90 <__addsf3x+0x60>
     d6a:	59 3f       	cpi	r21, 0xF9	; 249
     d6c:	50 f4       	brcc	.+20     	; 0xd82 <__addsf3x+0x52>
     d6e:	50 3e       	cpi	r21, 0xE0	; 224
     d70:	68 f1       	brcs	.+90     	; 0xdcc <__addsf3x+0x9c>
     d72:	1a 16       	cp	r1, r26
     d74:	f0 40       	sbci	r31, 0x00	; 0
     d76:	a2 2f       	mov	r26, r18
     d78:	23 2f       	mov	r18, r19
     d7a:	34 2f       	mov	r19, r20
     d7c:	44 27       	eor	r20, r20
     d7e:	58 5f       	subi	r21, 0xF8	; 248
     d80:	f3 cf       	rjmp	.-26     	; 0xd68 <__addsf3x+0x38>
     d82:	46 95       	lsr	r20
     d84:	37 95       	ror	r19
     d86:	27 95       	ror	r18
     d88:	a7 95       	ror	r26
     d8a:	f0 40       	sbci	r31, 0x00	; 0
     d8c:	53 95       	inc	r21
     d8e:	c9 f7       	brne	.-14     	; 0xd82 <__addsf3x+0x52>
     d90:	7e f4       	brtc	.+30     	; 0xdb0 <__addsf3x+0x80>
     d92:	1f 16       	cp	r1, r31
     d94:	ba 0b       	sbc	r27, r26
     d96:	62 0b       	sbc	r22, r18
     d98:	73 0b       	sbc	r23, r19
     d9a:	84 0b       	sbc	r24, r20
     d9c:	ba f0       	brmi	.+46     	; 0xdcc <__addsf3x+0x9c>
     d9e:	91 50       	subi	r25, 0x01	; 1
     da0:	a1 f0       	breq	.+40     	; 0xdca <__addsf3x+0x9a>
     da2:	ff 0f       	add	r31, r31
     da4:	bb 1f       	adc	r27, r27
     da6:	66 1f       	adc	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	c2 f7       	brpl	.-16     	; 0xd9e <__addsf3x+0x6e>
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <__addsf3x+0x9c>
     db0:	ba 0f       	add	r27, r26
     db2:	62 1f       	adc	r22, r18
     db4:	73 1f       	adc	r23, r19
     db6:	84 1f       	adc	r24, r20
     db8:	48 f4       	brcc	.+18     	; 0xdcc <__addsf3x+0x9c>
     dba:	87 95       	ror	r24
     dbc:	77 95       	ror	r23
     dbe:	67 95       	ror	r22
     dc0:	b7 95       	ror	r27
     dc2:	f7 95       	ror	r31
     dc4:	9e 3f       	cpi	r25, 0xFE	; 254
     dc6:	08 f0       	brcs	.+2      	; 0xdca <__addsf3x+0x9a>
     dc8:	b0 cf       	rjmp	.-160    	; 0xd2a <__addsf3+0x28>
     dca:	93 95       	inc	r25
     dcc:	88 0f       	add	r24, r24
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <__addsf3x+0xa2>
     dd0:	99 27       	eor	r25, r25
     dd2:	ee 0f       	add	r30, r30
     dd4:	97 95       	ror	r25
     dd6:	87 95       	ror	r24
     dd8:	08 95       	ret

00000dda <__divsf3>:
     dda:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3x>
     dde:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_round>
     de2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_pscB>
     de6:	58 f0       	brcs	.+22     	; 0xdfe <__divsf3+0x24>
     de8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_pscA>
     dec:	40 f0       	brcs	.+16     	; 0xdfe <__divsf3+0x24>
     dee:	29 f4       	brne	.+10     	; 0xdfa <__divsf3+0x20>
     df0:	5f 3f       	cpi	r21, 0xFF	; 255
     df2:	29 f0       	breq	.+10     	; 0xdfe <__divsf3+0x24>
     df4:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
     df8:	51 11       	cpse	r21, r1
     dfa:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_szero>
     dfe:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>

00000e02 <__divsf3x>:
     e02:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_split3>
     e06:	68 f3       	brcs	.-38     	; 0xde2 <__divsf3+0x8>

00000e08 <__divsf3_pse>:
     e08:	99 23       	and	r25, r25
     e0a:	b1 f3       	breq	.-20     	; 0xdf8 <__divsf3+0x1e>
     e0c:	55 23       	and	r21, r21
     e0e:	91 f3       	breq	.-28     	; 0xdf4 <__divsf3+0x1a>
     e10:	95 1b       	sub	r25, r21
     e12:	55 0b       	sbc	r21, r21
     e14:	bb 27       	eor	r27, r27
     e16:	aa 27       	eor	r26, r26
     e18:	62 17       	cp	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	38 f0       	brcs	.+14     	; 0xe2e <__divsf3_pse+0x26>
     e20:	9f 5f       	subi	r25, 0xFF	; 255
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	44 1f       	adc	r20, r20
     e2a:	aa 1f       	adc	r26, r26
     e2c:	a9 f3       	breq	.-22     	; 0xe18 <__divsf3_pse+0x10>
     e2e:	35 d0       	rcall	.+106    	; 0xe9a <__divsf3_pse+0x92>
     e30:	0e 2e       	mov	r0, r30
     e32:	3a f0       	brmi	.+14     	; 0xe42 <__divsf3_pse+0x3a>
     e34:	e0 e8       	ldi	r30, 0x80	; 128
     e36:	32 d0       	rcall	.+100    	; 0xe9c <__divsf3_pse+0x94>
     e38:	91 50       	subi	r25, 0x01	; 1
     e3a:	50 40       	sbci	r21, 0x00	; 0
     e3c:	e6 95       	lsr	r30
     e3e:	00 1c       	adc	r0, r0
     e40:	ca f7       	brpl	.-14     	; 0xe34 <__divsf3_pse+0x2c>
     e42:	2b d0       	rcall	.+86     	; 0xe9a <__divsf3_pse+0x92>
     e44:	fe 2f       	mov	r31, r30
     e46:	29 d0       	rcall	.+82     	; 0xe9a <__divsf3_pse+0x92>
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	88 1f       	adc	r24, r24
     e4e:	bb 1f       	adc	r27, r27
     e50:	26 17       	cp	r18, r22
     e52:	37 07       	cpc	r19, r23
     e54:	48 07       	cpc	r20, r24
     e56:	ab 07       	cpc	r26, r27
     e58:	b0 e8       	ldi	r27, 0x80	; 128
     e5a:	09 f0       	breq	.+2      	; 0xe5e <__divsf3_pse+0x56>
     e5c:	bb 0b       	sbc	r27, r27
     e5e:	80 2d       	mov	r24, r0
     e60:	bf 01       	movw	r22, r30
     e62:	ff 27       	eor	r31, r31
     e64:	93 58       	subi	r25, 0x83	; 131
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	3a f0       	brmi	.+14     	; 0xe78 <__divsf3_pse+0x70>
     e6a:	9e 3f       	cpi	r25, 0xFE	; 254
     e6c:	51 05       	cpc	r21, r1
     e6e:	78 f0       	brcs	.+30     	; 0xe8e <__divsf3_pse+0x86>
     e70:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
     e74:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_szero>
     e78:	5f 3f       	cpi	r21, 0xFF	; 255
     e7a:	e4 f3       	brlt	.-8      	; 0xe74 <__divsf3_pse+0x6c>
     e7c:	98 3e       	cpi	r25, 0xE8	; 232
     e7e:	d4 f3       	brlt	.-12     	; 0xe74 <__divsf3_pse+0x6c>
     e80:	86 95       	lsr	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b7 95       	ror	r27
     e88:	f7 95       	ror	r31
     e8a:	9f 5f       	subi	r25, 0xFF	; 255
     e8c:	c9 f7       	brne	.-14     	; 0xe80 <__divsf3_pse+0x78>
     e8e:	88 0f       	add	r24, r24
     e90:	91 1d       	adc	r25, r1
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	97 f9       	bld	r25, 7
     e98:	08 95       	ret
     e9a:	e1 e0       	ldi	r30, 0x01	; 1
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	bb 1f       	adc	r27, r27
     ea4:	62 17       	cp	r22, r18
     ea6:	73 07       	cpc	r23, r19
     ea8:	84 07       	cpc	r24, r20
     eaa:	ba 07       	cpc	r27, r26
     eac:	20 f0       	brcs	.+8      	; 0xeb6 <__divsf3_pse+0xae>
     eae:	62 1b       	sub	r22, r18
     eb0:	73 0b       	sbc	r23, r19
     eb2:	84 0b       	sbc	r24, r20
     eb4:	ba 0b       	sbc	r27, r26
     eb6:	ee 1f       	adc	r30, r30
     eb8:	88 f7       	brcc	.-30     	; 0xe9c <__divsf3_pse+0x94>
     eba:	e0 95       	com	r30
     ebc:	08 95       	ret

00000ebe <__fixsfsi>:
     ebe:	0e 94 66 07 	call	0xecc	; 0xecc <__fixunssfsi>
     ec2:	68 94       	set
     ec4:	b1 11       	cpse	r27, r1
     ec6:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_szero>
     eca:	08 95       	ret

00000ecc <__fixunssfsi>:
     ecc:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_splitA>
     ed0:	88 f0       	brcs	.+34     	; 0xef4 <__fixunssfsi+0x28>
     ed2:	9f 57       	subi	r25, 0x7F	; 127
     ed4:	98 f0       	brcs	.+38     	; 0xefc <__fixunssfsi+0x30>
     ed6:	b9 2f       	mov	r27, r25
     ed8:	99 27       	eor	r25, r25
     eda:	b7 51       	subi	r27, 0x17	; 23
     edc:	b0 f0       	brcs	.+44     	; 0xf0a <__fixunssfsi+0x3e>
     ede:	e1 f0       	breq	.+56     	; 0xf18 <__fixunssfsi+0x4c>
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	1a f0       	brmi	.+6      	; 0xef0 <__fixunssfsi+0x24>
     eea:	ba 95       	dec	r27
     eec:	c9 f7       	brne	.-14     	; 0xee0 <__fixunssfsi+0x14>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <__fixunssfsi+0x4c>
     ef0:	b1 30       	cpi	r27, 0x01	; 1
     ef2:	91 f0       	breq	.+36     	; 0xf18 <__fixunssfsi+0x4c>
     ef4:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fp_zero>
     ef8:	b1 e0       	ldi	r27, 0x01	; 1
     efa:	08 95       	ret
     efc:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_zero>
     f00:	67 2f       	mov	r22, r23
     f02:	78 2f       	mov	r23, r24
     f04:	88 27       	eor	r24, r24
     f06:	b8 5f       	subi	r27, 0xF8	; 248
     f08:	39 f0       	breq	.+14     	; 0xf18 <__fixunssfsi+0x4c>
     f0a:	b9 3f       	cpi	r27, 0xF9	; 249
     f0c:	cc f3       	brlt	.-14     	; 0xf00 <__fixunssfsi+0x34>
     f0e:	86 95       	lsr	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b3 95       	inc	r27
     f16:	d9 f7       	brne	.-10     	; 0xf0e <__fixunssfsi+0x42>
     f18:	3e f4       	brtc	.+14     	; 0xf28 <__fixunssfsi+0x5c>
     f1a:	90 95       	com	r25
     f1c:	80 95       	com	r24
     f1e:	70 95       	com	r23
     f20:	61 95       	neg	r22
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	08 95       	ret

00000f2a <__floatunsisf>:
     f2a:	e8 94       	clt
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <__floatsisf+0x12>

00000f2e <__floatsisf>:
     f2e:	97 fb       	bst	r25, 7
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__floatsisf+0x12>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	99 23       	and	r25, r25
     f42:	a9 f0       	breq	.+42     	; 0xf6e <__floatsisf+0x40>
     f44:	f9 2f       	mov	r31, r25
     f46:	96 e9       	ldi	r25, 0x96	; 150
     f48:	bb 27       	eor	r27, r27
     f4a:	93 95       	inc	r25
     f4c:	f6 95       	lsr	r31
     f4e:	87 95       	ror	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f1 11       	cpse	r31, r1
     f58:	f8 cf       	rjmp	.-16     	; 0xf4a <__floatsisf+0x1c>
     f5a:	fa f4       	brpl	.+62     	; 0xf9a <__floatsisf+0x6c>
     f5c:	bb 0f       	add	r27, r27
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__floatsisf+0x36>
     f60:	60 ff       	sbrs	r22, 0
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <__floatsisf+0x6c>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <__floatsisf+0x6c>
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <__floatsisf+0x48>
     f72:	96 e9       	ldi	r25, 0x96	; 150
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <__floatsisf+0x6a>
     f76:	77 23       	and	r23, r23
     f78:	21 f0       	breq	.+8      	; 0xf82 <__floatsisf+0x54>
     f7a:	9e e8       	ldi	r25, 0x8E	; 142
     f7c:	87 2f       	mov	r24, r23
     f7e:	76 2f       	mov	r23, r22
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__floatsisf+0x5e>
     f82:	66 23       	and	r22, r22
     f84:	71 f0       	breq	.+28     	; 0xfa2 <__floatsisf+0x74>
     f86:	96 e8       	ldi	r25, 0x86	; 134
     f88:	86 2f       	mov	r24, r22
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	2a f0       	brmi	.+10     	; 0xf9a <__floatsisf+0x6c>
     f90:	9a 95       	dec	r25
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	da f7       	brpl	.-10     	; 0xf90 <__floatsisf+0x62>
     f9a:	88 0f       	add	r24, r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__fp_inf>:
     fa4:	97 f9       	bld	r25, 7
     fa6:	9f 67       	ori	r25, 0x7F	; 127
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	08 95       	ret

00000fb0 <__fp_nan>:
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	80 ec       	ldi	r24, 0xC0	; 192
     fb4:	08 95       	ret

00000fb6 <__fp_pscA>:
     fb6:	00 24       	eor	r0, r0
     fb8:	0a 94       	dec	r0
     fba:	16 16       	cp	r1, r22
     fbc:	17 06       	cpc	r1, r23
     fbe:	18 06       	cpc	r1, r24
     fc0:	09 06       	cpc	r0, r25
     fc2:	08 95       	ret

00000fc4 <__fp_pscB>:
     fc4:	00 24       	eor	r0, r0
     fc6:	0a 94       	dec	r0
     fc8:	12 16       	cp	r1, r18
     fca:	13 06       	cpc	r1, r19
     fcc:	14 06       	cpc	r1, r20
     fce:	05 06       	cpc	r0, r21
     fd0:	08 95       	ret

00000fd2 <__fp_round>:
     fd2:	09 2e       	mov	r0, r25
     fd4:	03 94       	inc	r0
     fd6:	00 0c       	add	r0, r0
     fd8:	11 f4       	brne	.+4      	; 0xfde <__fp_round+0xc>
     fda:	88 23       	and	r24, r24
     fdc:	52 f0       	brmi	.+20     	; 0xff2 <__fp_round+0x20>
     fde:	bb 0f       	add	r27, r27
     fe0:	40 f4       	brcc	.+16     	; 0xff2 <__fp_round+0x20>
     fe2:	bf 2b       	or	r27, r31
     fe4:	11 f4       	brne	.+4      	; 0xfea <__fp_round+0x18>
     fe6:	60 ff       	sbrs	r22, 0
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <__fp_round+0x20>
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	8f 4f       	sbci	r24, 0xFF	; 255
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	08 95       	ret

00000ff4 <__fp_split3>:
     ff4:	57 fd       	sbrc	r21, 7
     ff6:	90 58       	subi	r25, 0x80	; 128
     ff8:	44 0f       	add	r20, r20
     ffa:	55 1f       	adc	r21, r21
     ffc:	59 f0       	breq	.+22     	; 0x1014 <__fp_splitA+0x10>
     ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    1000:	71 f0       	breq	.+28     	; 0x101e <__fp_splitA+0x1a>
    1002:	47 95       	ror	r20

00001004 <__fp_splitA>:
    1004:	88 0f       	add	r24, r24
    1006:	97 fb       	bst	r25, 7
    1008:	99 1f       	adc	r25, r25
    100a:	61 f0       	breq	.+24     	; 0x1024 <__fp_splitA+0x20>
    100c:	9f 3f       	cpi	r25, 0xFF	; 255
    100e:	79 f0       	breq	.+30     	; 0x102e <__fp_splitA+0x2a>
    1010:	87 95       	ror	r24
    1012:	08 95       	ret
    1014:	12 16       	cp	r1, r18
    1016:	13 06       	cpc	r1, r19
    1018:	14 06       	cpc	r1, r20
    101a:	55 1f       	adc	r21, r21
    101c:	f2 cf       	rjmp	.-28     	; 0x1002 <__fp_split3+0xe>
    101e:	46 95       	lsr	r20
    1020:	f1 df       	rcall	.-30     	; 0x1004 <__fp_splitA>
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <__fp_splitA+0x30>
    1024:	16 16       	cp	r1, r22
    1026:	17 06       	cpc	r1, r23
    1028:	18 06       	cpc	r1, r24
    102a:	99 1f       	adc	r25, r25
    102c:	f1 cf       	rjmp	.-30     	; 0x1010 <__fp_splitA+0xc>
    102e:	86 95       	lsr	r24
    1030:	71 05       	cpc	r23, r1
    1032:	61 05       	cpc	r22, r1
    1034:	08 94       	sec
    1036:	08 95       	ret

00001038 <__fp_zero>:
    1038:	e8 94       	clt

0000103a <__fp_szero>:
    103a:	bb 27       	eor	r27, r27
    103c:	66 27       	eor	r22, r22
    103e:	77 27       	eor	r23, r23
    1040:	cb 01       	movw	r24, r22
    1042:	97 f9       	bld	r25, 7
    1044:	08 95       	ret

00001046 <__mulsf3>:
    1046:	0e 94 36 08 	call	0x106c	; 0x106c <__mulsf3x>
    104a:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_round>
    104e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_pscA>
    1052:	38 f0       	brcs	.+14     	; 0x1062 <__mulsf3+0x1c>
    1054:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_pscB>
    1058:	20 f0       	brcs	.+8      	; 0x1062 <__mulsf3+0x1c>
    105a:	95 23       	and	r25, r21
    105c:	11 f0       	breq	.+4      	; 0x1062 <__mulsf3+0x1c>
    105e:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
    1062:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_nan>
    1066:	11 24       	eor	r1, r1
    1068:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_szero>

0000106c <__mulsf3x>:
    106c:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_split3>
    1070:	70 f3       	brcs	.-36     	; 0x104e <__mulsf3+0x8>

00001072 <__mulsf3_pse>:
    1072:	95 9f       	mul	r25, r21
    1074:	c1 f3       	breq	.-16     	; 0x1066 <__mulsf3+0x20>
    1076:	95 0f       	add	r25, r21
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	55 1f       	adc	r21, r21
    107c:	62 9f       	mul	r22, r18
    107e:	f0 01       	movw	r30, r0
    1080:	72 9f       	mul	r23, r18
    1082:	bb 27       	eor	r27, r27
    1084:	f0 0d       	add	r31, r0
    1086:	b1 1d       	adc	r27, r1
    1088:	63 9f       	mul	r22, r19
    108a:	aa 27       	eor	r26, r26
    108c:	f0 0d       	add	r31, r0
    108e:	b1 1d       	adc	r27, r1
    1090:	aa 1f       	adc	r26, r26
    1092:	64 9f       	mul	r22, r20
    1094:	66 27       	eor	r22, r22
    1096:	b0 0d       	add	r27, r0
    1098:	a1 1d       	adc	r26, r1
    109a:	66 1f       	adc	r22, r22
    109c:	82 9f       	mul	r24, r18
    109e:	22 27       	eor	r18, r18
    10a0:	b0 0d       	add	r27, r0
    10a2:	a1 1d       	adc	r26, r1
    10a4:	62 1f       	adc	r22, r18
    10a6:	73 9f       	mul	r23, r19
    10a8:	b0 0d       	add	r27, r0
    10aa:	a1 1d       	adc	r26, r1
    10ac:	62 1f       	adc	r22, r18
    10ae:	83 9f       	mul	r24, r19
    10b0:	a0 0d       	add	r26, r0
    10b2:	61 1d       	adc	r22, r1
    10b4:	22 1f       	adc	r18, r18
    10b6:	74 9f       	mul	r23, r20
    10b8:	33 27       	eor	r19, r19
    10ba:	a0 0d       	add	r26, r0
    10bc:	61 1d       	adc	r22, r1
    10be:	23 1f       	adc	r18, r19
    10c0:	84 9f       	mul	r24, r20
    10c2:	60 0d       	add	r22, r0
    10c4:	21 1d       	adc	r18, r1
    10c6:	82 2f       	mov	r24, r18
    10c8:	76 2f       	mov	r23, r22
    10ca:	6a 2f       	mov	r22, r26
    10cc:	11 24       	eor	r1, r1
    10ce:	9f 57       	subi	r25, 0x7F	; 127
    10d0:	50 40       	sbci	r21, 0x00	; 0
    10d2:	9a f0       	brmi	.+38     	; 0x10fa <__mulsf3_pse+0x88>
    10d4:	f1 f0       	breq	.+60     	; 0x1112 <__mulsf3_pse+0xa0>
    10d6:	88 23       	and	r24, r24
    10d8:	4a f0       	brmi	.+18     	; 0x10ec <__mulsf3_pse+0x7a>
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	bb 1f       	adc	r27, r27
    10e0:	66 1f       	adc	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	91 50       	subi	r25, 0x01	; 1
    10e8:	50 40       	sbci	r21, 0x00	; 0
    10ea:	a9 f7       	brne	.-22     	; 0x10d6 <__mulsf3_pse+0x64>
    10ec:	9e 3f       	cpi	r25, 0xFE	; 254
    10ee:	51 05       	cpc	r21, r1
    10f0:	80 f0       	brcs	.+32     	; 0x1112 <__mulsf3_pse+0xa0>
    10f2:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_inf>
    10f6:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__fp_szero>
    10fa:	5f 3f       	cpi	r21, 0xFF	; 255
    10fc:	e4 f3       	brlt	.-8      	; 0x10f6 <__mulsf3_pse+0x84>
    10fe:	98 3e       	cpi	r25, 0xE8	; 232
    1100:	d4 f3       	brlt	.-12     	; 0x10f6 <__mulsf3_pse+0x84>
    1102:	86 95       	lsr	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	b7 95       	ror	r27
    110a:	f7 95       	ror	r31
    110c:	e7 95       	ror	r30
    110e:	9f 5f       	subi	r25, 0xFF	; 255
    1110:	c1 f7       	brne	.-16     	; 0x1102 <__mulsf3_pse+0x90>
    1112:	fe 2b       	or	r31, r30
    1114:	88 0f       	add	r24, r24
    1116:	91 1d       	adc	r25, r1
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	97 f9       	bld	r25, 7
    111e:	08 95       	ret

00001120 <__udivmodhi4>:
    1120:	aa 1b       	sub	r26, r26
    1122:	bb 1b       	sub	r27, r27
    1124:	51 e1       	ldi	r21, 0x11	; 17
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <__udivmodhi4_ep>

00001128 <__udivmodhi4_loop>:
    1128:	aa 1f       	adc	r26, r26
    112a:	bb 1f       	adc	r27, r27
    112c:	a6 17       	cp	r26, r22
    112e:	b7 07       	cpc	r27, r23
    1130:	10 f0       	brcs	.+4      	; 0x1136 <__udivmodhi4_ep>
    1132:	a6 1b       	sub	r26, r22
    1134:	b7 0b       	sbc	r27, r23

00001136 <__udivmodhi4_ep>:
    1136:	88 1f       	adc	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	5a 95       	dec	r21
    113c:	a9 f7       	brne	.-22     	; 0x1128 <__udivmodhi4_loop>
    113e:	80 95       	com	r24
    1140:	90 95       	com	r25
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	08 95       	ret

00001148 <memset>:
    1148:	dc 01       	movw	r26, r24
    114a:	01 c0       	rjmp	.+2      	; 0x114e <memset+0x6>
    114c:	6d 93       	st	X+, r22
    114e:	41 50       	subi	r20, 0x01	; 1
    1150:	50 40       	sbci	r21, 0x00	; 0
    1152:	e0 f7       	brcc	.-8      	; 0x114c <memset+0x4>
    1154:	08 95       	ret

00001156 <strcat>:
    1156:	fb 01       	movw	r30, r22
    1158:	dc 01       	movw	r26, r24
    115a:	0d 90       	ld	r0, X+
    115c:	00 20       	and	r0, r0
    115e:	e9 f7       	brne	.-6      	; 0x115a <strcat+0x4>
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	01 90       	ld	r0, Z+
    1164:	0d 92       	st	X+, r0
    1166:	00 20       	and	r0, r0
    1168:	e1 f7       	brne	.-8      	; 0x1162 <strcat+0xc>
    116a:	08 95       	ret

0000116c <__itoa_ncheck>:
    116c:	bb 27       	eor	r27, r27
    116e:	4a 30       	cpi	r20, 0x0A	; 10
    1170:	31 f4       	brne	.+12     	; 0x117e <__itoa_ncheck+0x12>
    1172:	99 23       	and	r25, r25
    1174:	22 f4       	brpl	.+8      	; 0x117e <__itoa_ncheck+0x12>
    1176:	bd e2       	ldi	r27, 0x2D	; 45
    1178:	90 95       	com	r25
    117a:	81 95       	neg	r24
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__utoa_common>

00001182 <__utoa_ncheck>:
    1182:	bb 27       	eor	r27, r27

00001184 <__utoa_common>:
    1184:	fb 01       	movw	r30, r22
    1186:	55 27       	eor	r21, r21
    1188:	aa 27       	eor	r26, r26
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	aa 1f       	adc	r26, r26
    1190:	a4 17       	cp	r26, r20
    1192:	10 f0       	brcs	.+4      	; 0x1198 <__utoa_common+0x14>
    1194:	a4 1b       	sub	r26, r20
    1196:	83 95       	inc	r24
    1198:	50 51       	subi	r21, 0x10	; 16
    119a:	b9 f7       	brne	.-18     	; 0x118a <__utoa_common+0x6>
    119c:	a0 5d       	subi	r26, 0xD0	; 208
    119e:	aa 33       	cpi	r26, 0x3A	; 58
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <__utoa_common+0x20>
    11a2:	a9 5d       	subi	r26, 0xD9	; 217
    11a4:	a1 93       	st	Z+, r26
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	79 f7       	brne	.-34     	; 0x1188 <__utoa_common+0x4>
    11aa:	b1 11       	cpse	r27, r1
    11ac:	b1 93       	st	Z+, r27
    11ae:	11 92       	st	Z+, r1
    11b0:	cb 01       	movw	r24, r22
    11b2:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <strrev>

000011b6 <strrev>:
    11b6:	dc 01       	movw	r26, r24
    11b8:	fc 01       	movw	r30, r24
    11ba:	67 2f       	mov	r22, r23
    11bc:	71 91       	ld	r23, Z+
    11be:	77 23       	and	r23, r23
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <strrev+0x4>
    11c2:	32 97       	sbiw	r30, 0x02	; 2
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <strrev+0x18>
    11c6:	7c 91       	ld	r23, X
    11c8:	6d 93       	st	X+, r22
    11ca:	70 83       	st	Z, r23
    11cc:	62 91       	ld	r22, -Z
    11ce:	ae 17       	cp	r26, r30
    11d0:	bf 07       	cpc	r27, r31
    11d2:	c8 f3       	brcs	.-14     	; 0x11c6 <strrev+0x10>
    11d4:	08 95       	ret

000011d6 <_exit>:
    11d6:	f8 94       	cli

000011d8 <__stop_program>:
    11d8:	ff cf       	rjmp	.-2      	; 0x11d8 <__stop_program>
